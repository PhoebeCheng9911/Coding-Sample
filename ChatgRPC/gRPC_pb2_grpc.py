# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gRPC_pb2 as gRPC__pb2


class ChatServerStub(object):
    """python3 -m grpc_tools.protoc -I. --python_out=. --pyi_out=. --grpc_python_out=. gRPC.proto
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/ChatServer/Login',
                request_serializer=gRPC__pb2.AuthenticationToken.SerializeToString,
                response_deserializer=gRPC__pb2.ReturnStatusPayload.FromString,
                )
        self.CreateAct = channel.unary_unary(
                '/ChatServer/CreateAct',
                request_serializer=gRPC__pb2.AuthenticationToken.SerializeToString,
                response_deserializer=gRPC__pb2.SuccessStatus.FromString,
                )
        self.DeleteAct = channel.unary_unary(
                '/ChatServer/DeleteAct',
                request_serializer=gRPC__pb2.Username.SerializeToString,
                response_deserializer=gRPC__pb2.SuccessStatus.FromString,
                )
        self.Status = channel.unary_unary(
                '/ChatServer/Status',
                request_serializer=gRPC__pb2.Username.SerializeToString,
                response_deserializer=gRPC__pb2.PendingMessagesPayload.FromString,
                )
        self.ListUsernames = channel.unary_unary(
                '/ChatServer/ListUsernames',
                request_serializer=gRPC__pb2.ListUsernamesParams.SerializeToString,
                response_deserializer=gRPC__pb2.Usernames.FromString,
                )
        self.SendMsg = channel.unary_unary(
                '/ChatServer/SendMsg',
                request_serializer=gRPC__pb2.SendParams.SerializeToString,
                response_deserializer=gRPC__pb2.ReturnStatusPayload.FromString,
                )
        self.ListPendingMsgs = channel.unary_unary(
                '/ChatServer/ListPendingMsgs',
                request_serializer=gRPC__pb2.Username.SerializeToString,
                response_deserializer=gRPC__pb2.PendingMessagesPayload.FromString,
                )
        self.Logout = channel.unary_unary(
                '/ChatServer/Logout',
                request_serializer=gRPC__pb2.Username.SerializeToString,
                response_deserializer=gRPC__pb2.SuccessStatus.FromString,
                )
        self.ChatStream = channel.unary_stream(
                '/ChatServer/ChatStream',
                request_serializer=gRPC__pb2.Empty.SerializeToString,
                response_deserializer=gRPC__pb2.ChatMessage.FromString,
                )
        self.SendNote = channel.unary_unary(
                '/ChatServer/SendNote',
                request_serializer=gRPC__pb2.ChatMessage.SerializeToString,
                response_deserializer=gRPC__pb2.Empty.FromString,
                )


class ChatServerServicer(object):
    """python3 -m grpc_tools.protoc -I. --python_out=. --pyi_out=. --grpc_python_out=. gRPC.proto
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsernames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPendingMsgs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatStream(self, request, context):
        """This bi-directional stream makes it possible to send and receive Notes between 2 persons
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendNote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=gRPC__pb2.AuthenticationToken.FromString,
                    response_serializer=gRPC__pb2.ReturnStatusPayload.SerializeToString,
            ),
            'CreateAct': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAct,
                    request_deserializer=gRPC__pb2.AuthenticationToken.FromString,
                    response_serializer=gRPC__pb2.SuccessStatus.SerializeToString,
            ),
            'DeleteAct': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAct,
                    request_deserializer=gRPC__pb2.Username.FromString,
                    response_serializer=gRPC__pb2.SuccessStatus.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=gRPC__pb2.Username.FromString,
                    response_serializer=gRPC__pb2.PendingMessagesPayload.SerializeToString,
            ),
            'ListUsernames': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsernames,
                    request_deserializer=gRPC__pb2.ListUsernamesParams.FromString,
                    response_serializer=gRPC__pb2.Usernames.SerializeToString,
            ),
            'SendMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMsg,
                    request_deserializer=gRPC__pb2.SendParams.FromString,
                    response_serializer=gRPC__pb2.ReturnStatusPayload.SerializeToString,
            ),
            'ListPendingMsgs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPendingMsgs,
                    request_deserializer=gRPC__pb2.Username.FromString,
                    response_serializer=gRPC__pb2.PendingMessagesPayload.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=gRPC__pb2.Username.FromString,
                    response_serializer=gRPC__pb2.SuccessStatus.SerializeToString,
            ),
            'ChatStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ChatStream,
                    request_deserializer=gRPC__pb2.Empty.FromString,
                    response_serializer=gRPC__pb2.ChatMessage.SerializeToString,
            ),
            'SendNote': grpc.unary_unary_rpc_method_handler(
                    servicer.SendNote,
                    request_deserializer=gRPC__pb2.ChatMessage.FromString,
                    response_serializer=gRPC__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ChatServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatServer(object):
    """python3 -m grpc_tools.protoc -I. --python_out=. --pyi_out=. --grpc_python_out=. gRPC.proto
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/Login',
            gRPC__pb2.AuthenticationToken.SerializeToString,
            gRPC__pb2.ReturnStatusPayload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/CreateAct',
            gRPC__pb2.AuthenticationToken.SerializeToString,
            gRPC__pb2.SuccessStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/DeleteAct',
            gRPC__pb2.Username.SerializeToString,
            gRPC__pb2.SuccessStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/Status',
            gRPC__pb2.Username.SerializeToString,
            gRPC__pb2.PendingMessagesPayload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUsernames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/ListUsernames',
            gRPC__pb2.ListUsernamesParams.SerializeToString,
            gRPC__pb2.Usernames.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/SendMsg',
            gRPC__pb2.SendParams.SerializeToString,
            gRPC__pb2.ReturnStatusPayload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPendingMsgs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/ListPendingMsgs',
            gRPC__pb2.Username.SerializeToString,
            gRPC__pb2.PendingMessagesPayload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/Logout',
            gRPC__pb2.Username.SerializeToString,
            gRPC__pb2.SuccessStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ChatServer/ChatStream',
            gRPC__pb2.Empty.SerializeToString,
            gRPC__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendNote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatServer/SendNote',
            gRPC__pb2.ChatMessage.SerializeToString,
            gRPC__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
